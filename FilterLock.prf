(FilterLock
 (LogicEff_TCC1 0
  (LogicEff_TCC1-1 nil 3829640392
   ("" (skos 1 alpha s p)
    (("" (flatten)
      (("" (expand "is_finite")
        (("" (inst 1 THREADS id)
          (("" (expand "injective?")
            (("" (skos 1 x y)
              (("" (flatten)
                (("" (expand "id") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (THREADS const-decl "above(1)" PROC nil)
    (< const-decl "bool" reals nil)
    (PROC nonempty-type-eq-decl nil PROC nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (fullset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil
   (LogicEff subtype
    "sets[PROC].remove(FilterLock.proc, sets[PROC].fullset)"
    "finite_set[PROC]")))
 (LogicEff_TCC2 0
  (LogicEff_TCC3-1 nil 3839863563
   ("" (skos 1 alpha s p)
    (("" (flatten)
      (("" (expand "is_finite")
        (("" (inst 1 THREADS id)
          (("" (expand "injective?")
            (("" (skos 1 x y)
              (("" (flatten)
                (("" (expand "id") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (THREADS const-decl "above(1)" PROC nil)
    (< const-decl "bool" reals nil)
    (PROC nonempty-type-eq-decl nil PROC nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (fullset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil
   (LogicEff subtype
    "sets[PROC].remove(FilterLock.proc, sets[PROC].fullset)"
    "finite_set[PROC]")))
 (LogicEff_TCC3 0
  (LogicEff_TCC4-1 nil 3839863563
   ("" (skos 1 alpha s p)
    (("" (flatten)
      (("" (expand "is_finite")
        (("" (inst 1 THREADS id)
          (("" (expand "injective?")
            (("" (skos 1 x y)
              (("" (flatten)
                (("" (expand "id") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (THREADS const-decl "above(1)" PROC nil)
    (< const-decl "bool" reals nil)
    (PROC nonempty-type-eq-decl nil PROC nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil (LogicEff subtype "sets[PROC].fullset" "finite_set[PROC]")))
 (LogicEff_TCC4 0
  (LogicEff_TCC5-1 nil 3839863563
   ("" (skos 1 alpha s p)
    (("" (flatten)
      (("" (expand "is_finite")
        (("" (inst 1 THREADS id)
          (("" (expand "injective?")
            (("" (skos 1 x y)
              (("" (flatten)
                (("" (expand "id") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (THREADS const-decl "above(1)" PROC nil)
    (< const-decl "bool" reals nil)
    (PROC nonempty-type-eq-decl nil PROC nil)
    (set type-eq-decl nil sets nil) (fullset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil (LogicEff subtype "sets[PROC].fullset" "finite_set[PROC]")))
 (LogicEff_TCC5 0
  (LogicEff_TCC6-1 nil 3839863563
   ("" (skos 1 alpha s p)
    (("" (flatten)
      (("" (expand "is_finite")
        (("" (inst 1 THREADS id)
          (("" (expand "injective?")
            (("" (skos 1 x y)
              (("" (flatten)
                (("" (expand "id") (("" (propax) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (THREADS const-decl "above(1)" PROC nil)
    (< const-decl "bool" reals nil)
    (PROC nonempty-type-eq-decl nil PROC nil)
    (set type-eq-decl nil sets nil) (remove const-decl "set" sets nil)
    (fullset const-decl "set" sets nil)
    (below type-eq-decl nil nat_types nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (injective? const-decl "bool" functions nil)
    (is_finite const-decl "bool" finite_sets nil))
   nil
   (LogicEff subtype
    "sets[PROC].remove(FilterLock.proc, sets[PROC].fullset)"
    "finite_set[PROC]"))))

